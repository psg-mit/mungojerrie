// Problem 2.10 from Martin Gardner's
// Colossal Book of Short Puzzles and Problems.

mdp

const double p0 = 1/2;
const double p1 = 2/3;

label "victory" = won=2;

module game
  won : [0..2] init 0;
  first : [0..1];
  start : bool init true;

  [choose0] start -> (first'=0) & (start'=false);
  [choose1] start -> (first'=1) & (start'=false);

  [play] played=0 & first=0 -> p0 : (won'=1) + 1-p0 : true;
  [play] played=0 & first=1 -> p1 : (won'=1) + 1-p1 : true;

  [play] played=1 & first=0 -> p1 : (won'=won+1) + 1-p1 : (won'=0);
  [play] played=1 & first=1 -> p0 : (won'=won+1) + 1-p0 : (won'=0);

  [play] played=2 & first=0 & won=1 -> p0 : (won'=2) + 1-p0 : true;
  [play] played=2 & first=1 & won=1 -> p1 : (won'=2) + 1-p1 : true;

  [stay] played=3 | won=2 | (played=2 & won=0) -> true;
endmodule

module counter
  played : [0..3] init 0;

  [play] !start & played<3 -> (played'=played+1);
endmodule

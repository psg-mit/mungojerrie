// A game in the style of "A Simple Algorithm for Solving Qualitative
// Probabilistic Parity Games."
//
// The row numbers grow going up.
//
// The smallest meaningful values for N and M are 4 and 2, respectively.

smg

player R0 [ns0], [nd0], [es0], [ed0], [ss0], [sd0], [ws0], [wd0] endplayer
player R1 [ns1], [nd1], [es1], [ed1], [ss1], [sd1], [ws1], [wd1] endplayer

const int N = 12;     // side of square grid
const int M = 4;      // side of each zone
const int i0 = 0;     // initial row and column of robot0
const int i1 = N-1;   // initial row and column of robot1

const double p = 1/2; // probability of completion of long moves
const double q = 1 - p;

label "z00" = r0 > N-M-1 & c0 < M;
label "z01" = r0 > N-M-1 & c0 > N-M-1;
label "z02" = r0 < M   & c0 < M;
label "z03" = r0 < M   & c0 > N-M-1;

label "z10" = r1 > N-M-1 & c1 < M;
label "z11" = r1 > N-M-1 & c1 > N-M-1;
label "z12" = r1 < M   & c1 < M;
label "z13" = r1 < M   & c1 > N-M-1;

module robot0
  r0 : [0..N-1] init i0;
  c0 : [0..N-1] init i0;

  [ns0] r0<N-1 & (c0 != c1 | r0 + 1 != r1) -> (r0' = r0 + 1);
  [ns0] r0=N-1 | (c0 = c1 & r0 + 1 = r1)   -> true;

  [nd0] r0<N-2 & (c0 != c1 | (r0 + 1 != r1 & r0 + 2 != r1)) ->
    p : (r0' = r0 + 2) + q : (r0' = r0 + 1);

  [es0] c0<N-1 & (r0 != r1 | c0 + 1 != c1) -> (c0' = c0 + 1);
  [es0] c0=N-1 | (r0 = r1 & c0 + 1 = c1)   -> true;

  [ed0] c0<N-2 & (r0 != r1 | (c0 + 1 != c1 & c0 + 2 != c1)) ->
    p : (c0' = c0 + 2) + q : (c0' = c0 + 1);

  [ss0] r0>0 & (c0 != c1 | r0 - 1 != r1)   -> (r0' = r0 - 1);
  [ss0] r0=0 | (c0 = c1 & r0 - 1 = r1)     -> true;

  [sd0] r0>1 & (c0 != c1 | (r0 - 1 != r1 & r0 - 2 != r1)) ->
    p : (r0' = r0 - 2) + q : (r0' = r0 - 1);

  [ws0] c0>0 & (r0 != r1 | c0 - 1 != c1)   -> (c0' = c0 - 1);
  [ws0] c0=0 | (r0 = r1 & c0 - 1 = c1)     -> true;

  [wd0] c0>1 & (r0 != r1 | (c0 - 1 != c1 & c0 - 2 != c1)) ->
    p : (c0' = c0 - 2) + q : (c0' = c0 - 1);
endmodule

module robot1 = robot0 [ r0=r1, c0=c1, i0=i1, ns0=ns1, nd0=nd1,
                         es0=es1, ed0=ed1, ss0=ss1, sd0=sd1,
                         ws0=ws1, wd0=wd1 ] endmodule

module control
  t : [0..1] init 0; // turn

  [ns0] t=0 -> (t'=1);
  [nd0] t=0 -> (t'=1);
  [es0] t=0 -> (t'=1);
  [ed0] t=0 -> (t'=1);
  [ss0] t=0 -> (t'=1);
  [sd0] t=0 -> (t'=1);
  [ws0] t=0 -> (t'=1);
  [wd0] t=0 -> (t'=1);

  [ns1] t=1 -> (t'=0);
  [nd1] t=1 -> (t'=0);
  [es1] t=1 -> (t'=0);
  [ed1] t=1 -> (t'=0);
  [ss1] t=1 -> (t'=0);
  [sd1] t=1 -> (t'=0);
  [ws1] t=1 -> (t'=0);
  [wd1] t=1 -> (t'=0);
endmodule

// An MDP for Sutton and Barto's Windy Gridworld example with
// chess king moves, rest and stochastic wind (p. 131).

mdp

// Grid dimensions.
const int M = 7;
const int N = 10;

// Start and goal positions.
const int srow = M/2;
const int scol = 0;
const int grow = srow;
const int gcol = N-3;

const double p = 1/3;
const double q = (1-p)/2;

formula goal  = r=grow & c=gcol;

label "goal"  = goal;
label "hwalls" = r=0 | r=M-1;

// Southerly base wind velocity to be added to the agent's velocity.
formula wind  = (c=6 | c=7) ? 2 : ((2<c & c<6) | c=8) ? 1 : 0;

module grid
  r : [0..M-1] init srow;
  c : [0..N-1] init scol;

  [n]  true -> p : (r' = min(r+wind+1,M-1)) +
               q : (r' = min(r+wind+2,M-1)) +
               q : (r' = min(r+wind,M-1));
  [e]  true -> p : (r' = min(r+wind,M-1))   & (c' = min(c+1,N-1)) +
               q : (r' = min(r+wind+1,M-1)) & (c' = min(c+1,N-1)) +
               q : (r' = wind=0 ? max(r-1,0) : min(r+wind-1,M-1)) &
                   (c' = min(c+1,N-1));
  [s]  true -> p : (r' = wind=0 ? max(0,r-1) : min(r+wind-1,M-1)) +
               q : (r' = min(r+wind,M-1)) +
               q : (r' = wind<2 ? max(0,r+wind-2) : min(r+wind-2,M-1));
  [w]  true -> p : (r' = min(r+wind,M-1))   & (c' = max(c-1,0)) +
               q : (r' = min(r+wind+1,M-1)) & (c' = max(c-1,0)) +
               q : (r' = wind=0 ? max(r-1,0) : min(r+wind-1,M-1)) &
                   (c' = max(c-1,0));
  [ne] true -> p : (r' = min(r+wind+1,M-1)) & (c' = min(c+1,N-1)) +
               q : (r' = min(r+wind+2,M-1)) & (c' = min(c+1,N-1)) +
               q : (r' = min(r+wind,M-1)) & (c' = min(c+1,N-1));
  [se] true -> p : (r' = wind=0 ? max(0,r-1) : min(r+wind-1,M-1)) &
                   (c' = min(c+1,N-1)) +
               q : (r' = min(r+wind,M-1)) & (c' = min(c+1,N-1)) +
               q : (r' = wind<2 ? max(0,r+wind-2) : min(r+wind-2,M-1)) &
                   (c' = min(c+1,N-1));
  [sw] true -> p : (r' = wind=0 ? max(0,r-1) : min(r+wind-1,M-1)) &
                   (c' = max(c-1,0)) +
               q : (r' = min(r+wind,M-1)) & (c' = max(c-1,0)) +
               q : (r' = wind<2 ? max(0,r+wind-2) : min(r+wind-2,M-1)) &
                   (c' = max(c-1,0));
  [nw] true -> p : (r' = min(r+wind+1,M-1)) & (c' = max(c-1,0)) +
               q : (r' = min(r+wind+2,M-1)) & (c' = max(c-1,0)) +
               q : (r' = min(r+wind,M-1)) & (c' = max(c-1,0));
  [r]  true -> p : (r' = min(r+wind,M-1)) +
               q : (r' = min(r+wind+1,M-1)) +
               q : (r' = wind=0 ? max(r-1,0) : min(r+wind-1,M-1));
endmodule

rewards
   goal :  0.0;
  !goal : -1.0;
endrewards

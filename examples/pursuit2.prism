// A stochastic pursuit game with two agents.

smg

player P0 [n0], [e0], [s0], [w0] endplayer
player P1 [n1], [e1], [s1], [w1] endplayer

const int M = 6;      // number of rows
const int N = 6;      // number of columns
const int D = 5;      // maximum distance
const int sc0 = 0;    // starting column for agent 0
const int sc1 = N-1;  // starting column for agent 1
const double p = 1/2; // probability of double move
const double q = 1-p; // probability of single move

formula trap0 = r0=M/2 & c0=N/2;
formula trap1 = r1=M/2 & c1=N/2;
formula dr = r0>r1 ? r0-r1 : r1-r0; // vertical distance
formula dc = c0>c1 ? c0-c1 : c1-c0; // horizontal distance

label "safe"    = !trap0;
label "trap1"   = trap1;
label "close"   = dr + dc < D;

module grid0
  r0 : [0..M-1] init 0;
  c0 : [0..N-1] init sc0;

  [n0] r0 < M-2 -> p : (r0' = r0 + 2) + q : (r0' = r0 + 1);
  [n0] r0 = M-2 -> (r0' = r0 + 1);
  [n0] r0 = M-1 -> true;

  [e0] c0 < N-2 -> p : (c0' = c0 + 2) + q : (c0' = c0 + 1);
  [e0] c0 = N-2 -> (c0' = c0 + 1);
  [e0] c0 = N-1 -> true;

  [s0] r0 > 1 -> p : (r0' = r0 - 2) + q : (r0' = r0 - 1);
  [s0] r0 = 1 -> (r0' = r0 - 1);
  [s0] r0 = 0 -> true;

  [w0] c0 > 1 -> p : (c0' = c0 - 2) + q : (c0' = c0 - 1);
  [w0] c0 = 1 -> (c0' = c0 - 1);
  [w0] c0 = 0 -> true;

endmodule

module grid1 = grid0 [ r0=r1, c0=c1, sc0=sc1, n0=n1, e0=e1, s0=s1, w0=w1 ] endmodule

module control
  t : [0..1] init 0;

  [n0] t=0 -> (t'=1-t);
  [e0] t=0 -> (t'=1-t);
  [s0] t=0 -> (t'=1-t);
  [w0] t=0 -> (t'=1-t);

  [n1] t=1 -> (t'=1-t);
  [e1] t=1 -> (t'=1-t);
  [s1] t=1 -> (t'=1-t);
  [w1] t=1 -> (t'=1-t);

endmodule

// An MDP in the "frozen lake" style with two agents.

mdp

const int M = 6;
const int N = 6;
const int sc0 = 0;
const int sc1 = N-1;

formula goal0 = r0=M-1 & c0=N-1;
formula goal1 = r1=M-1 & c1=0;
formula trap0 = r0=M/2 & c0=N/2;
formula trap1 = r1=M/2 & c1=N/2;
formula clash = r0=r1 & c0=c1;

label "goal"    = goal0 & goal1;
label "safe"    = !(trap0 | trap1 | clash);

module grid0
  r0 : [0..M-1] init 0;
  c0 : [0..N-1] init sc0;

  [n0] r0<M-1 & c0>0 & c0<N-1 -> 1/3 : (r0'=r0+1) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0-1) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [n0] r0<M-1 & c0=0         -> 1/3 : (r0'=r0+1) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [n0] r0<M-1 & c0=N-1       -> 1/3 : (r0'=r0+1) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0-1) + 1/3 : (r0'=r0) & (c0'=c0);
  [n0] r0=M-1 & c0>0 & c0<N-1 -> 1/3 : (r0'=r0) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0-1) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [n0] r0=M-1 & c0=0         -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [n0] r0=M-1 & c0=N-1       -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0-1);

  [e0] r0>0 & r0<M-1 & c0<N-1 -> 1/3 : (r0'=r0) & (c0'=c0+1) +
                             1/3 : (r0'=r0+1) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);
  [e0] r0=0 & c0<N-1         -> 1/3 : (r0'=r0) & (c0'=c0+1) +
                             1/3 : (r0'=r0+1) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0);
  [e0] r0=M-1 & c0<N-1       -> 1/3 : (r0'=r0) & (c0'=c0+1) +
                             1/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);
  [e0] r0>0 & r0<M-1 & c0=N-1 -> 1/3 : (r0'=r0) & (c0'=c0) +
                             1/3 : (r0'=r0+1) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);
  [e0] r0=0 & c0=N-1         -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0+1) & (c0'=c0);
  [e0] r0=M-1 & c0=N-1       -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);

  [s0] r0>0 & c0>0 & c0<N-1   -> 1/3 : (r0'=r0-1) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0-1) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [s0] r0>0 & c0=0           -> 1/3 : (r0'=r0-1) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [s0] r0>0 & c0=N-1         -> 1/3 : (r0'=r0-1) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0-1) + 1/3 : (r0'=r0) & (c0'=c0);
  [s0] r0=0 & c0>0 & c0<N-1   -> 1/3 : (r0'=r0) & (c0'=c0) +
                             1/3 : (r0'=r0) & (c0'=c0-1) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [s0] r0=0 & c0=0           -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0+1);
  [s0] r0=0 & c0=N-1         -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0-1);

  [w0] r0>0 & r0<M-1 & c0>0   -> 1/3 : (r0'=r0) & (c0'=c0-1) +
                             1/3 : (r0'=r0+1) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);
  [w0] r0=0 & c0>0           -> 1/3 : (r0'=r0) & (c0'=c0-1) +
                             1/3 : (r0'=r0+1) & (c0'=c0) + 1/3 : (r0'=r0) & (c0'=c0);
  [w0] r0=M-1 & c0>0         -> 1/3 : (r0'=r0) & (c0'=c0-1) +
                             1/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);
  [w0] r0>0 & r0<M-1 & c0=0   -> 1/3 : (r0'=r0) & (c0'=c0) +
                             1/3 : (r0'=r0+1) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);
  [w0] r0=0 & c0=0           -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0+1) & (c0'=c0);
  [w0] r0=M-1 & c0=0         -> 2/3 : (r0'=r0) & (c0'=c0) + 1/3 : (r0'=r0-1) & (c0'=c0);
endmodule

module grid1 = grid0 [ r0=r1, c0=c1, sc0=sc1, n0=n1, e0=e1, s0=s1, w0=w1 ] endmodule

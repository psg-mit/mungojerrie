// A probabilistic version of the game of dots and boxes.
//
// Two players take turns connecting adjacent points of a 4x4 lattice.
// A player who completes a box scores a point and plays again with probability p.

smg

// Default gives deterministic behavior.
const double p = 1;
const double q = 1-p;

// Either player may play last, but the no-op action is (arbitrarily)
// assigned to Player 0.
player P0
  [ah00], [ah01], [ah02], [ah10], [ah11], [ah12], [ah20], [ah21], [ah22], [ah30], [ah31], [ah32],
  [av00], [av01], [av02], [av10], [av11], [av12], [av20], [av21], [av22], [av30], [av31], [av32],
  [noop]
endplayer
player P1
  [bh00], [bh01], [bh02], [bh10], [bh11], [bh12], [bh20], [bh21], [bh22], [bh30], [bh31], [bh32],
  [bv00], [bv01], [bv02], [bv10], [bv11], [bv12], [bv20], [bv21], [bv22], [bv30], [bv31], [bv32]
endplayer

// cxij counts the boxes completed by choosing edge xij.
// x is either h or v, i ranges from 0 to 3, and j rnges from 0 or 2.
// Boundary edges may only complete one box.  Internal edges, up to two.
formula ch00 = (v00 & h10 & v10) ? 1 : 0;
formula ch01 = (v10 & h11 & v20) ? 1 : 0;
formula ch02 = (v20 & h12 & v30) ? 1 : 0;
formula ch10 = ((v00 & h00 & v10) ? 1 : 0) + ((v01 & h20 & v11) ? 1 : 0);
formula ch11 = ((v10 & h01 & v20) ? 1 : 0) + ((v11 & h21 & v21) ? 1 : 0);
formula ch12 = ((v20 & h02 & v30) ? 1 : 0) + ((v21 & h22 & v31) ? 1 : 0);
formula ch20 = ((v01 & h10 & v11) ? 1 : 0) + ((v02 & h30 & v12) ? 1 : 0);
formula ch21 = ((v11 & h11 & v21) ? 1 : 0) + ((v12 & h31 & v22) ? 1 : 0);
formula ch22 = ((v21 & h12 & v31) ? 1 : 0) + ((v22 & h32 & v32) ? 1 : 0);
formula ch30 = (v02 & h20 & v12) ? 1 : 0;
formula ch31 = (v12 & h21 & v22) ? 1 : 0;
formula ch32 = (v22 & h22 & v32) ? 1 : 0;

formula cv00 = (h00 & v10 & h10) ? 1 : 0;
formula cv01 = (h10 & v11 & h20) ? 1 : 0;
formula cv02 = (h20 & v12 & h30) ? 1 : 0;
formula cv10 = ((h00 & v00 & h10) ? 1 : 0) + ((h01 & v20 & h11) ? 1 : 0);
formula cv11 = ((h10 & v01 & h20) ? 1 : 0) + ((h11 & v21 & h21) ? 1 : 0);
formula cv12 = ((h20 & v02 & h30) ? 1 : 0) + ((h21 & v22 & h31) ? 1 : 0);
formula cv20 = ((h01 & v10 & h11) ? 1 : 0) + ((h02 & v30 & h12) ? 1 : 0);
formula cv21 = ((h11 & v11 & h21) ? 1 : 0) + ((h12 & v31 & h22) ? 1 : 0);
formula cv22 = ((h21 & v12 & h31) ? 1 : 0) + ((h22 & v32 & h32) ? 1 : 0);
formula cv30 = (h02 & v20 & h12) ? 1 : 0;
formula cv31 = (h12 & v21 & h22) ? 1 : 0;
formula cv32 = (h22 & v22 & h32) ? 1 : 0;

// End of the game: all edges have been drawn.
formula full = h00 & h01 & h02 & h10 & h11 & h12 & h20 & h21 & h22 & h30 & h31 & h32 &
               v00 & v01 & v02 & v10 & v11 & v12 & v20 & v21 & v22 & v30 & v31 & v32;

label "w0" = full & sq0 > sq1;
label "w1" = full & sq0 < sq1;
label "done" = full;
label "all" = sq0 + sq1 = 9;

module play
  h00 : bool init false; // top row left side
  h01 : bool init false; // top row middle
  h02 : bool init false; // top row right side
  h10 : bool init false; // second row left side
  h11 : bool init false; // second row middle
  h12 : bool init false; // second row right side
  h20 : bool init false; // third row left side
  h21 : bool init false; // third row middle
  h22 : bool init false; // third row right side
  h30 : bool init false; // bottom row left side
  h31 : bool init false; // bottom row middle
  h32 : bool init false; // bottom row right side
  v00 : bool init false; // left column left side
  v01 : bool init false; // left column middle
  v02 : bool init false; // left column right side    
  v10 : bool init false; // second column left side
  v11 : bool init false; // second column middle
  v12 : bool init false; // second column right side
  v20 : bool init false; // third column left side
  v21 : bool init false; // third column middle
  v22 : bool init false; // third column right side
  v30 : bool init false; // right column left side
  v31 : bool init false; // right column middle
  v32 : bool init false; // right column right side
  sq0 : [0..9] init 0;   // squares completed by P0
  sq1 : [0..9] init 0;   // squares completed by P1

  [ah00] t=0 & !h00 -> (h00'=true) & (sq0'=sq0+ch00);
  [ah01] t=0 & !h01 -> (h01'=true) & (sq0'=sq0+ch01);
  [ah02] t=0 & !h02 -> (h02'=true) & (sq0'=sq0+ch02);
  [ah10] t=0 & !h10 -> (h10'=true) & (sq0'=sq0+ch10);
  [ah11] t=0 & !h11 -> (h11'=true) & (sq0'=sq0+ch11);
  [ah12] t=0 & !h12 -> (h12'=true) & (sq0'=sq0+ch12);
  [ah20] t=0 & !h20 -> (h20'=true) & (sq0'=sq0+ch20);
  [ah21] t=0 & !h21 -> (h21'=true) & (sq0'=sq0+ch21);
  [ah22] t=0 & !h22 -> (h22'=true) & (sq0'=sq0+ch22);
  [ah30] t=0 & !h30 -> (h30'=true) & (sq0'=sq0+ch30);
  [ah31] t=0 & !h31 -> (h31'=true) & (sq0'=sq0+ch31);
  [ah32] t=0 & !h32 -> (h32'=true) & (sq0'=sq0+ch32);

  [av00] t=0 & !v00 -> (v00'=true) & (sq0'=sq0+cv00);
  [av01] t=0 & !v01 -> (v01'=true) & (sq0'=sq0+cv01);
  [av02] t=0 & !v02 -> (v02'=true) & (sq0'=sq0+cv02);
  [av10] t=0 & !v10 -> (v10'=true) & (sq0'=sq0+cv10);
  [av11] t=0 & !v11 -> (v11'=true) & (sq0'=sq0+cv11);
  [av12] t=0 & !v12 -> (v12'=true) & (sq0'=sq0+cv12);
  [av20] t=0 & !v20 -> (v20'=true) & (sq0'=sq0+cv20);
  [av21] t=0 & !v21 -> (v21'=true) & (sq0'=sq0+cv21);
  [av22] t=0 & !v22 -> (v22'=true) & (sq0'=sq0+cv22);
  [av30] t=0 & !v30 -> (v30'=true) & (sq0'=sq0+cv30);
  [av31] t=0 & !v31 -> (v31'=true) & (sq0'=sq0+cv31);
  [av32] t=0 & !v32 -> (v32'=true) & (sq0'=sq0+cv32);

  [noop] full -> true;

  [bh00] t=1 & !h00 -> (h00'=true) & (sq1'=sq1+ch00);
  [bh01] t=1 & !h01 -> (h01'=true) & (sq1'=sq1+ch01);
  [bh02] t=1 & !h02 -> (h02'=true) & (sq1'=sq1+ch02);
  [bh10] t=1 & !h10 -> (h10'=true) & (sq1'=sq1+ch10);
  [bh11] t=1 & !h11 -> (h11'=true) & (sq1'=sq1+ch11);
  [bh12] t=1 & !h12 -> (h12'=true) & (sq1'=sq1+ch12);
  [bh20] t=1 & !h20 -> (h20'=true) & (sq1'=sq1+ch20);
  [bh21] t=1 & !h21 -> (h21'=true) & (sq1'=sq1+ch21);
  [bh22] t=1 & !h22 -> (h22'=true) & (sq1'=sq1+ch22);
  [bh30] t=1 & !h30 -> (h30'=true) & (sq1'=sq1+ch30);
  [bh31] t=1 & !h31 -> (h31'=true) & (sq1'=sq1+ch31);
  [bh32] t=1 & !h32 -> (h32'=true) & (sq1'=sq1+ch32);

  [bv00] t=1 & !v00 -> (v00'=true) & (sq1'=sq1+cv00);
  [bv01] t=1 & !v01 -> (v01'=true) & (sq1'=sq1+cv01);
  [bv02] t=1 & !v02 -> (v02'=true) & (sq1'=sq1+cv02);
  [bv10] t=1 & !v10 -> (v10'=true) & (sq1'=sq1+cv10);
  [bv11] t=1 & !v11 -> (v11'=true) & (sq1'=sq1+cv11);
  [bv12] t=1 & !v12 -> (v12'=true) & (sq1'=sq1+cv12);
  [bv20] t=1 & !v20 -> (v20'=true) & (sq1'=sq1+cv20);
  [bv21] t=1 & !v21 -> (v21'=true) & (sq1'=sq1+cv21);
  [bv22] t=1 & !v22 -> (v22'=true) & (sq1'=sq1+cv22);
  [bv30] t=1 & !v30 -> (v30'=true) & (sq1'=sq1+cv30);
  [bv31] t=1 & !v31 -> (v31'=true) & (sq1'=sq1+cv31);
  [bv32] t=1 & !v32 -> (v32'=true) & (sq1'=sq1+cv32);

endmodule

module turn
  t : [0..1] init 0; // 0: P0's turn; 1: P1's turn

  [ah00] t=0 & !h00 -> p : (t'=(ch00 > 0 ? 0 : 1)) + q : (t'=1);
  [ah01] t=0 & !h01 -> p : (t'=(ch01 > 0 ? 0 : 1)) + q : (t'=1);
  [ah02] t=0 & !h02 -> p : (t'=(ch02 > 0 ? 0 : 1)) + q : (t'=1);
  [ah10] t=0 & !h10 -> p : (t'=(ch10 > 0 ? 0 : 1)) + q : (t'=1);
  [ah11] t=0 & !h11 -> p : (t'=(ch11 > 0 ? 0 : 1)) + q : (t'=1);
  [ah12] t=0 & !h12 -> p : (t'=(ch12 > 0 ? 0 : 1)) + q : (t'=1);
  [ah20] t=0 & !h20 -> p : (t'=(ch20 > 0 ? 0 : 1)) + q : (t'=1);
  [ah21] t=0 & !h21 -> p : (t'=(ch21 > 0 ? 0 : 1)) + q : (t'=1);
  [ah22] t=0 & !h22 -> p : (t'=(ch22 > 0 ? 0 : 1)) + q : (t'=1);
  [ah30] t=0 & !h30 -> p : (t'=(ch30 > 0 ? 0 : 1)) + q : (t'=1);
  [ah31] t=0 & !h31 -> p : (t'=(ch31 > 0 ? 0 : 1)) + q : (t'=1);
  [ah32] t=0 & !h32 -> p : (t'=(ch32 > 0 ? 0 : 1)) + q : (t'=1);

  [av00] t=0 & !v00 -> p : (t'=(cv00 > 0 ? 0 : 1)) + q : (t'=1);
  [av01] t=0 & !v01 -> p : (t'=(cv01 > 0 ? 0 : 1)) + q : (t'=1);
  [av02] t=0 & !v02 -> p : (t'=(cv02 > 0 ? 0 : 1)) + q : (t'=1);
  [av10] t=0 & !v10 -> p : (t'=(cv10 > 0 ? 0 : 1)) + q : (t'=1);
  [av11] t=0 & !v11 -> p : (t'=(cv11 > 0 ? 0 : 1)) + q : (t'=1);
  [av12] t=0 & !v12 -> p : (t'=(cv12 > 0 ? 0 : 1)) + q : (t'=1);
  [av20] t=0 & !v20 -> p : (t'=(cv20 > 0 ? 0 : 1)) + q : (t'=1);
  [av21] t=0 & !v21 -> p : (t'=(cv21 > 0 ? 0 : 1)) + q : (t'=1);
  [av22] t=0 & !v22 -> p : (t'=(cv22 > 0 ? 0 : 1)) + q : (t'=1);
  [av30] t=0 & !v30 -> p : (t'=(cv30 > 0 ? 0 : 1)) + q : (t'=1);
  [av31] t=0 & !v31 -> p : (t'=(cv31 > 0 ? 0 : 1)) + q : (t'=1);
  [av32] t=0 & !v32 -> p : (t'=(cv32 > 0 ? 0 : 1)) + q : (t'=1);

  [noop] full -> true;

  [bh00] t=1 & !h00 -> p : (t'=(ch00 > 0 ? 1 : 0)) + q : (t'=0);
  [bh01] t=1 & !h01 -> p : (t'=(ch01 > 0 ? 1 : 0)) + q : (t'=0);
  [bh02] t=1 & !h02 -> p : (t'=(ch02 > 0 ? 1 : 0)) + q : (t'=0);
  [bh10] t=1 & !h10 -> p : (t'=(ch10 > 0 ? 1 : 0)) + q : (t'=0);
  [bh11] t=1 & !h11 -> p : (t'=(ch11 > 0 ? 1 : 0)) + q : (t'=0);
  [bh12] t=1 & !h12 -> p : (t'=(ch12 > 0 ? 1 : 0)) + q : (t'=0);
  [bh20] t=1 & !h20 -> p : (t'=(ch20 > 0 ? 1 : 0)) + q : (t'=0);
  [bh21] t=1 & !h21 -> p : (t'=(ch21 > 0 ? 1 : 0)) + q : (t'=0);
  [bh22] t=1 & !h22 -> p : (t'=(ch22 > 0 ? 1 : 0)) + q : (t'=0);
  [bh30] t=1 & !h30 -> p : (t'=(ch30 > 0 ? 1 : 0)) + q : (t'=0);
  [bh31] t=1 & !h31 -> p : (t'=(ch31 > 0 ? 1 : 0)) + q : (t'=0);
  [bh32] t=1 & !h32 -> p : (t'=(ch32 > 0 ? 1 : 0)) + q : (t'=0);

  [bv00] t=1 & !v00 -> p : (t'=(cv00 > 0 ? 1 : 0)) + q : (t'=0);
  [bv01] t=1 & !v01 -> p : (t'=(cv01 > 0 ? 1 : 0)) + q : (t'=0);
  [bv02] t=1 & !v02 -> p : (t'=(cv02 > 0 ? 1 : 0)) + q : (t'=0);
  [bv10] t=1 & !v10 -> p : (t'=(cv10 > 0 ? 1 : 0)) + q : (t'=0);
  [bv11] t=1 & !v11 -> p : (t'=(cv11 > 0 ? 1 : 0)) + q : (t'=0);
  [bv12] t=1 & !v12 -> p : (t'=(cv12 > 0 ? 1 : 0)) + q : (t'=0);
  [bv20] t=1 & !v20 -> p : (t'=(cv20 > 0 ? 1 : 0)) + q : (t'=0);
  [bv21] t=1 & !v21 -> p : (t'=(cv21 > 0 ? 1 : 0)) + q : (t'=0);
  [bv22] t=1 & !v22 -> p : (t'=(cv22 > 0 ? 1 : 0)) + q : (t'=0);
  [bv30] t=1 & !v30 -> p : (t'=(cv30 > 0 ? 1 : 0)) + q : (t'=0);
  [bv31] t=1 & !v31 -> p : (t'=(cv31 > 0 ? 1 : 0)) + q : (t'=0);
  [bv32] t=1 & !v32 -> p : (t'=(cv32 > 0 ? 1 : 0)) + q : (t'=0);

endmodule
